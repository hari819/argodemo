{{- range $key,$val := .Values.applications }}
{{- /*
in order to use tpl within a range, _and_ have the key/val available to sub-templates,
need to add some variables to the root context.
*/ -}}
{{- $_ := set $ "curAppName" (print $.Values.envName "-" $key) }}
{{- if $val.enabled }}
---
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: {{ required "A valid envName is required" $.Values.envName }}-{{ $key }}
{{- if $val.extraAnnotations }}
{{ tpl $val.extraAnnotations $ | indent 2 }}
{{- end }}
spec:
  destination:
    namespace: {{ $val.destination.namespace | default $.Values.default.app.destination.namespace | required (printf "No destination.namespace specified for %s" $key ) }}
    server: {{ $val.destination.server | default $.Values.default.app.destination.server | required (printf "No destination.server specified for %s" $key ) }}
{{- if $.Values.projectOverride }}
  project: {{ $.Values.projectOverride }}
{{- else }}
  project: {{ $.Values.envName }}-{{ $val.project | default $.Values.default.app.project | required (printf "No project specified for %s" $key ) }}
{{- end }}
{{- if $val.enableAutoSync | default $.Values.default.app.enableAutoSync }}
  syncPolicy:
    automated:
      prune: {{ $val.autoSyncPrune | default $.Values.default.app.autoSyncPrune | default true }} # Specifies if resources should be pruned during auto-syncing ( false by default ).
      selfHeal: false # Specifies if partial app sync should be executed when resources are changed only in target Kubernetes cluster and no git change detected ( false by default ).
      allowEmpty: false # Allows deleting all application resources during automatic syncing ( false by default ).
    syncOptions:     # Sync options which modifies sync behavior
    - Validate=true # disables resource validation (equivalent to 'kubectl apply --validate=false') ( true by default ).
    - CreateNamespace=true # Namespace Auto-Creation ensures that namespace specified as the application destination exists in the destination cluster.
    retry:
      limit: {{ $.Values.spec.retry.limit }} # number of failed sync attempt retries; unlimited number of attempts if less than 0
      backoff:
        duration: {{ $.Values.spec.retry.backoff.duration }} # the amount to back off. Default unit is seconds, but could also be a duration (e.g. "2m", "1h")
        factor: {{ $.Values.spec.retry.backoff.factor }} # a factor to multiply the base duration after each failed retry
        maxDuration: {{ $.Values.spec.retry.backoff.maxDuration }} # the maximum amount of time allowed for the backoff strategy
{{- end }}
  source:
    path: {{ tpl $val.source.path $ }}
    repoURL: {{ $val.source.repoURL | default $.Values.default.app.source.repoURL | required (printf "No source.repoURL specified for %s" $key ) }}
    targetRevision: {{ $val.source.targetRevision | default $.Values.default.app.source.targetRevision | required (printf "No source.targetRevision specified for %s" $key ) }}
{{- if $val.source.extraSourceFields }}
{{ tpl $val.source.extraSourceFields $ | indent 4 }}
{{- else if $.Values.default.app.source.extraSourceFields }}
{{ tpl $.Values.default.app.source.extraSourceFields $ | indent 4 }}
{{- end }}
{{- if $val.extraFields }}
{{ tpl $val.extraFields $ | indent 2 }}
{{- else if $.Values.default.app.extraFields }}
{{ tpl $.Values.default.app.extraFields $ | indent 2 }}
{{- end }}
{{- end }}
{{- end }}