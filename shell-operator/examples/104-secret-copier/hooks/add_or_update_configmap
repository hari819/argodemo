#!/usr/bin/env bash

source /hooks/common/functions.sh

hook::config() {
  cat <<EOF
{
  "configVersion":"v1",
  "kubernetes": [
    {
      "apiVersion": "v1",
      "kind": "ConfigMap",
      "executeHookOnEvent": [
        "Added",
        "Modified"
      ],
      "labelSelector": {
        "matchLabels": {
          "secret-copier": "yes"
        }
      },
      "namespace": {
        "nameSelector": {
          "matchNames": [
            "default",
            "docker-registry",
            "rook-ceph", 
            "rabbitmq",
            "cattle-monitoring-system",
            "gitea",
            "istio-system",
            "metallb"
          ]
        }
      }
    }
  ]
}
EOF
}

hook::trigger() {
  # ignore Synchronization for simplicity
  type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)
  if [[ $type == "Synchronization" ]] ; then
    echo Got Synchronization event
    exit 0
  fi

  for secret in $(jq -r '.[] | .object.metadata.name' $BINDING_CONTEXT_PATH | tr ' ' '\n' | sort -u | xargs)
  do
    # figure out all the namespaces to where the update has to be propagated
    for namespace in $(kubectl get namespace -o json | jq -r '.items[] | select(.status.phase == "Active") | .metadata.name' | grep -vE 'default|monitoring|istio-system|rabbitmq|gitea|rook-ceph|metallb|docker-registry|kube-system|kube-node-lease|kube-public')
    do
      # figure out the namespace where the secret update happened
      secret_namespace=$(jq --arg keyvar "$secret" -r '.[] | select(.object.metadata.name == $keyvar) | .object.metadata.namespace' $BINDING_CONTEXT_PATH)
      secret_namespace=$(echo $secret_namespace | tr -d '\n')
      secret_namespace=$(echo $secret_namespace | tr ' ' '\n' | sort -u | xargs)
      echo "AddOrUpdateConfigmap: kubectl -n $secret_namespace get configmap $secret -o json TargetNamespace: $namespace"
      kubectl -n $secret_namespace get configmap $secret -o json | \
        jq -r ".metadata.namespace=\"${namespace}\" |
                .metadata |= with_entries(select([.key] | inside([\"name\", \"namespace\"])))" \
        | kubectl::replace_or_create
    done
  done
}

common::run_hook "$@"
