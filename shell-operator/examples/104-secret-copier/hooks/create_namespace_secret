#!/usr/bin/env bash

source /hooks/common/functions.sh

hook::config() {
  cat <<EOF
{
  "configVersion":"v1",
  "kubernetes": [
    {
      "apiVersion": "v1",
      "kind": "namespace",
      "executeHookOnEvent": [
        "Added"
      ]
    }
  ]
}
EOF
}

hook::trigger() {
  # ignore Synchronization for simplicity
  # TODO: check each namespace in .[0].objects
  type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)
  if [[ $type == "Synchronization" ]] ; then
    echo Got Synchronization event
    exit 0
  fi

  #when a new namespae is created, ignore the infra namespaces as copying secrets to those namespaces from other namespaces is not required
  for namespace in $(jq -r '.[] | .object.metadata.name' $BINDING_CONTEXT_PATH | grep -vE 'default|cattle-monitoring-system|istio-system|rabbitmq|gitea|rook-ceph|metallb|docker-registry|kube-system|kube-node-lease|kube-public');
  do
    for sec_namespace in $(kubectl get namespace -o json | jq -r '.items[] | select(.status.phase == "Active") | .metadata.name' | grep -E 'default|cattle-monitoring-system|istio-system|rabbitmq|gitea|rook-ceph|metallb|docker-registry|kube-system|kube-node-lease|kube-public')
    do
      for secret in $(kubectl -n $sec_namespace get secret -l secret-copier=yes -o name);
      do
        kubectl -n $sec_namespace get $secret -o json | jq -r ".metadata.namespace=\"${namespace}\" | .metadata |= with_entries(select([.key] | inside([\"name\", \"namespace\"])))" | kubectl::replace_or_create
      done
    done
  done
}

common::run_hook "$@"
